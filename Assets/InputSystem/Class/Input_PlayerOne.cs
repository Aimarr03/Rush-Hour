//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerOne.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputManager
{
    public partial class @Input_PlayerOne: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input_PlayerOne()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerOne"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""91d32042-53a5-41a0-8b88-931f5b1d2c6f"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Button"",
                    ""id"": ""bdf2d6cd-626f-487f-9653-b2178a7fa739"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interract"",
                    ""type"": ""Button"",
                    ""id"": ""9d172d27-3cd7-4eab-82ec-a6749ab1e62e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.35),Hold(pressPoint=0.5)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""cf1ddc02-45d5-4618-9a85-6be49a91e55e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""edd87572-0bda-4cb6-b032-26f7df4b14d6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""81b9eadb-57fd-43b6-bb2b-2e202c9c7b41"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a1741110-5c73-44cf-b87c-9a60e50dcfae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7ba1a5e3-1342-4538-a012-bdd3ba407ee5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Interract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be6a618d-90ee-428d-861e-40722186aa61"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""b1a9ad67-28ce-4cd3-ac64-ad02c5aec8c0"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Button"",
                    ""id"": ""aa46e2e1-3a19-49e4-89c2-1f2a51a519af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interract"",
                    ""type"": ""Button"",
                    ""id"": ""1dffcc17-47ff-4da6-9415-2b965aef923d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""c91d36bc-a635-4f09-9bcd-59f7614a3181"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b9b287b5-1205-4e9f-ad54-55042180c864"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""921d9efe-7e11-4d48-9e9c-24560d84ea99"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""be71502c-268e-49a4-ba7c-c5eaf10d79c4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c1b16aca-b972-49ea-a00a-9451527978a7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Hold,Tap(duration=0.35)"",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Interract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1626118e-92f8-4b8f-85ce-340d7dc0f58b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialgoue"",
            ""id"": ""e9b1da6a-d7cf-44da-86c6-33da63af9f87"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e9bd8aba-0d60-48f6-be8f-482238a2cdc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interract"",
                    ""type"": ""Button"",
                    ""id"": ""ecf0c5c3-f9a5-48c4-9534-bf1e1d45dcdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.35),Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""389ee2cd-b2d6-4d74-a7f3-c1d7b5d1d8ba"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0773e222-a025-481b-8aae-bb4b28d45fca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default Scheme"",
                    ""action"": ""Interract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default Scheme"",
            ""bindingGroup"": ""Default Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_Navigation = m_Gameplay.FindAction("Navigation", throwIfNotFound: true);
            m_Gameplay_Interract = m_Gameplay.FindAction("Interract", throwIfNotFound: true);
            m_Gameplay_Pause = m_Gameplay.FindAction("Pause", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Navigation = m_UI.FindAction("Navigation", throwIfNotFound: true);
            m_UI_Interract = m_UI.FindAction("Interract", throwIfNotFound: true);
            m_UI_Resume = m_UI.FindAction("Resume", throwIfNotFound: true);
            // Dialgoue
            m_Dialgoue = asset.FindActionMap("Dialgoue", throwIfNotFound: true);
            m_Dialgoue_Pause = m_Dialgoue.FindAction("Pause", throwIfNotFound: true);
            m_Dialgoue_Interract = m_Dialgoue.FindAction("Interract", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_Navigation;
        private readonly InputAction m_Gameplay_Interract;
        private readonly InputAction m_Gameplay_Pause;
        public struct GameplayActions
        {
            private @Input_PlayerOne m_Wrapper;
            public GameplayActions(@Input_PlayerOne wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigation => m_Wrapper.m_Gameplay_Navigation;
            public InputAction @Interract => m_Wrapper.m_Gameplay_Interract;
            public InputAction @Pause => m_Wrapper.m_Gameplay_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @Navigation.started += instance.OnNavigation;
                @Navigation.performed += instance.OnNavigation;
                @Navigation.canceled += instance.OnNavigation;
                @Interract.started += instance.OnInterract;
                @Interract.performed += instance.OnInterract;
                @Interract.canceled += instance.OnInterract;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @Navigation.started -= instance.OnNavigation;
                @Navigation.performed -= instance.OnNavigation;
                @Navigation.canceled -= instance.OnNavigation;
                @Interract.started -= instance.OnInterract;
                @Interract.performed -= instance.OnInterract;
                @Interract.canceled -= instance.OnInterract;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Navigation;
        private readonly InputAction m_UI_Interract;
        private readonly InputAction m_UI_Resume;
        public struct UIActions
        {
            private @Input_PlayerOne m_Wrapper;
            public UIActions(@Input_PlayerOne wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigation => m_Wrapper.m_UI_Navigation;
            public InputAction @Interract => m_Wrapper.m_UI_Interract;
            public InputAction @Resume => m_Wrapper.m_UI_Resume;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Navigation.started += instance.OnNavigation;
                @Navigation.performed += instance.OnNavigation;
                @Navigation.canceled += instance.OnNavigation;
                @Interract.started += instance.OnInterract;
                @Interract.performed += instance.OnInterract;
                @Interract.canceled += instance.OnInterract;
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Navigation.started -= instance.OnNavigation;
                @Navigation.performed -= instance.OnNavigation;
                @Navigation.canceled -= instance.OnNavigation;
                @Interract.started -= instance.OnInterract;
                @Interract.performed -= instance.OnInterract;
                @Interract.canceled -= instance.OnInterract;
                @Resume.started -= instance.OnResume;
                @Resume.performed -= instance.OnResume;
                @Resume.canceled -= instance.OnResume;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);

        // Dialgoue
        private readonly InputActionMap m_Dialgoue;
        private List<IDialgoueActions> m_DialgoueActionsCallbackInterfaces = new List<IDialgoueActions>();
        private readonly InputAction m_Dialgoue_Pause;
        private readonly InputAction m_Dialgoue_Interract;
        public struct DialgoueActions
        {
            private @Input_PlayerOne m_Wrapper;
            public DialgoueActions(@Input_PlayerOne wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_Dialgoue_Pause;
            public InputAction @Interract => m_Wrapper.m_Dialgoue_Interract;
            public InputActionMap Get() { return m_Wrapper.m_Dialgoue; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DialgoueActions set) { return set.Get(); }
            public void AddCallbacks(IDialgoueActions instance)
            {
                if (instance == null || m_Wrapper.m_DialgoueActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DialgoueActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Interract.started += instance.OnInterract;
                @Interract.performed += instance.OnInterract;
                @Interract.canceled += instance.OnInterract;
            }

            private void UnregisterCallbacks(IDialgoueActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
                @Interract.started -= instance.OnInterract;
                @Interract.performed -= instance.OnInterract;
                @Interract.canceled -= instance.OnInterract;
            }

            public void RemoveCallbacks(IDialgoueActions instance)
            {
                if (m_Wrapper.m_DialgoueActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDialgoueActions instance)
            {
                foreach (var item in m_Wrapper.m_DialgoueActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DialgoueActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DialgoueActions @Dialgoue => new DialgoueActions(this);
        private int m_DefaultSchemeSchemeIndex = -1;
        public InputControlScheme DefaultSchemeScheme
        {
            get
            {
                if (m_DefaultSchemeSchemeIndex == -1) m_DefaultSchemeSchemeIndex = asset.FindControlSchemeIndex("Default Scheme");
                return asset.controlSchemes[m_DefaultSchemeSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnNavigation(InputAction.CallbackContext context);
            void OnInterract(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnNavigation(InputAction.CallbackContext context);
            void OnInterract(InputAction.CallbackContext context);
            void OnResume(InputAction.CallbackContext context);
        }
        public interface IDialgoueActions
        {
            void OnPause(InputAction.CallbackContext context);
            void OnInterract(InputAction.CallbackContext context);
        }
    }
}
